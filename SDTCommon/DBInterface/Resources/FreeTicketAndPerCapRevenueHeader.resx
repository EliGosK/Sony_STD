<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DeleteRevenue" xml:space="preserve">
    <value>DELETE tblFreeTicketAndCapRevenueHeader
WHERE revenue_id = @revenue_id;</value>
  </data>
  <data name="Insert" xml:space="preserve">
    <value>INSERT INTO tblFreeTicketAndCapRevenueHeader
(
 revenue_id
 , free_ticket_norm_count
 , free_ticket_special_count
 , free_more_5_count
 , free_more_5_sum
 , update_by
 , update_date
)
VALUES
(
 @revenue_id
 , @free_ticket_norm_count
 , @free_ticket_special_count
 , @free_more_5_count
 , @free_more_5_sum
 , @update_by
 , @cvDate
);</value>
  </data>
  <data name="SelectAllIncomplete" xml:space="preserve">
    <value>SELECT
	rv.revenueid
	, rv.revenue_adms
	, rv.revenue_amount
	, rv.revenue_date
	, rv.revenue_Time
	, rv.revenue_LastUpdate
	, rv.revenue_type
	, rv.theatersub_id
	, rv.user_id
	, rv.movie_system
	, rv.movies_id
	, rv.theater_id
	, rv.status_id
	, rv.sound_type
	, rv.timehour_id
	, rv.timemin_id
	, rv.film_type_sound_id
	, rv.revenue_amount_no_cap
	, rv.revenue_adms_with_free_ticket
	, rv.check_ticket
	, m.movie_id
	, m.movietype_id
	, SUBSTRING(m.movie_nameen, 1, 15) AS ShortName
	, m.movie_nameen + '/' + m.movie_nameth AS MovieName

	--, ISNULL(free_ticket.free_ticket_norm_count, 0) AS free_ticket_norm_count
	--, ISNULL(free_ticket.free_ticket_special_count, 0) AS free_ticket_special_count
	--, ISNULL(free_ticket.free_more_5_count, 0) AS free_more_5_count
	--, ISNULL(free_ticket.free_more_5_sum, 0) AS free_more_5_sum
	--, ISNULL(free_ticket.count_revenue_free, 0) AS count_revenue_free
	--, ISNULL(free_ticket.count_revenue_cap, 0) AS count_revenue_cap
	--, ISNULL(free_ticket.sum_revenue_free, 0) AS sum_revenue_free
	--, ISNULL(free_ticket.sum_revenue_cap, 0) AS sum_revenue_cap
	--, ISNULL(free_ticket.sum_revenue_free_cap, 0) AS sum_revenue_free_cap
FROM tblRevenue AS rv
INNER JOIN tblMovie AS m
	ON m.movie_id = rv.movies_id
LEFT JOIN tblFreeTicketAndCapRevenueHeader AS ftrh
	ON ftrh.revenue_id = rv.revenueid
LEFT JOIN
(
	SELECT
		ftrd.revenue_id
		, SUM(CASE 
				WHEN ftc.counting = 1
					THEN ftrd.quantity
				ELSE 0
				END) AS count_revenue_free
		, SUM(CASE 
				WHEN ftc.counting = 1
					THEN 0
				ELSE ftrd.quantity
				END) AS count_revenue_cap
		, SUM(CASE 
				WHEN ftc.counting = 0 OR rv.revenue_date &gt; ftcm.available_to
					THEN 0
				ELSE ftrd.price * ftrd.quantity
				END) AS sum_revenue_free
		, SUM(CASE 
				WHEN ftc.counting = 1 OR rv.revenue_date &gt; ftcm.available_to
					THEN 0
				ELSE ftrd.price * ftrd.quantity
				END) AS sum_revenue_cap
		, SUM(CASE 
				WHEN rv.revenue_date &gt; ftcm.available_to
					THEN 0
				ELSE ftrd.price * ftrd.quantity
				END) AS sum_revenue_free_cap
	FROM tblFreeTicketAndCapRevenueDetail AS ftrd
	INNER JOIN tblFreeTicketAndCap AS ftc
		ON ftc.ticket_cap_id = ftrd.ticket_cap_id
	INNER JOIN tblRevenue AS rv
		ON rv.revenueid = ftrd.revenue_id
	INNER JOIN tblFreeTicketAndCapByMovie AS ftcm
		ON ftcm.movie_id = rv.movies_id
		AND ftcm.theater_id = rv.theater_id
		AND ftcm.ticket_cap_id = ftrd.ticket_cap_id
	WHERE rv.check_ticket = 1
		AND rv.theater_id = @theater_id
		AND rv.revenue_date &lt; @before_date
	GROUP BY
		ftrd.revenue_id
) AS free_ticket
	ON free_ticket.revenue_id = rv.revenueid
WHERE rv.check_ticket = 1
	AND rv.theater_id = @theater_id
	AND rv.revenue_date &lt; @before_date
	AND 
	(
		rv.revenue_adms &lt; 0 
		OR
		rv.revenue_adms_with_free_ticket &lt; ISNULL(free_ticket.count_revenue_free, 0) + ISNULL(free_ticket.count_revenue_cap, 0) + ISNULL(ftrh.free_ticket_norm_count, 0) + ISNULL(ftrh.free_ticket_special_count, 0) 
	)
ORDER BY
	rv.revenue_date DESC
	, rv.theater_id
	, rv.theatersub_id
	, rv.revenue_time
;</value>
  </data>
  <data name="SelectCheckRevenue" xml:space="preserve">
    <value>SELECT
	rv.revenueid AS revenue_id
	, rv.revenue_amount
	, rv.revenue_amount_no_cap
	, rv.revenue_adms
	, rv.revenue_adms_with_free_ticket
	, rv.movies_id AS movie_id
	, ISNULL(ftrh.free_ticket_norm_count, 0) AS free_ticket_norm_count
	, ISNULL(ftrh.free_ticket_special_count, 0) AS free_ticket_special_count
	, ISNULL(ftrh.free_more_5_count, 0) AS free_more_5_count
	, ISNULL(ftrh.free_more_5_sum, 0) AS free_more_5_sum
	, ISNULL(free_ticket.count_revenue_free, 0) AS count_revenue_free
	, ISNULL(free_ticket.count_revenue_cap, 0) AS count_revenue_cap
	, ISNULL(free_ticket.sum_revenue_free, 0) AS sum_revenue_free
	, ISNULL(free_ticket.sum_revenue_cap, 0) AS sum_revenue_cap
	, ISNULL(free_ticket.sum_revenue_free_cap, 0) AS sum_revenue_free_cap
	, CASE WHEN rv.revenue_amount =  rv.revenue_amount_no_cap + ISNULL(free_ticket.sum_revenue_free_cap, 0) THEN 1 ELSE 0 END AS sum_complete	
	, CASE WHEN rv.revenue_adms &lt; 0 OR rv.revenue_adms_with_free_ticket &lt; ISNULL(free_ticket.count_revenue_free, 0) + ISNULL(free_ticket.count_revenue_cap, 0) + ISNULL(ftrh.free_ticket_norm_count, 0) + ISNULL(ftrh.free_ticket_special_count, 0) THEN 0 ELSE 1 END AS count_complete
	, CASE WHEN rv.revenue_amount_no_cap = 0 THEN rv.revenue_adms_with_free_ticket ELSE rv.revenue_adms_with_free_ticket - (ISNULL(ftrh.free_ticket_norm_count, 0) + ISNULL(ftrh.free_ticket_special_count, 0)) END AS actual_viewer 
FROM tblRevenue AS rv
LEFT JOIN tblFreeTicketAndCapRevenueHeader AS ftrh
	ON ftrh.revenue_id = rv.revenueid
LEFT JOIN
(
	SELECT
		ftrd.revenue_id
		, SUM(CASE 
				WHEN ftc.counting = 1
					THEN ftrd.quantity
				ELSE 0
				END) AS count_revenue_free
		, SUM(CASE 
				WHEN ftc.counting = 1
					THEN 0
				ELSE ftrd.quantity
				END) AS count_revenue_cap
		, SUM(CASE 
				WHEN ftc.counting = 0 OR rv.revenue_date &gt; ftcm.available_to
					THEN 0
				ELSE ftrd.price * ftrd.quantity
				END) AS sum_revenue_free
		, SUM(CASE 
				WHEN ftc.counting = 1 OR rv.revenue_date &gt; ftcm.available_to
					THEN 0
				ELSE ftrd.price * ftrd.quantity
				END) AS sum_revenue_cap
		, SUM(CASE 
				WHEN rv.revenue_date &gt; ftcm.available_to
					THEN 0
				ELSE ftrd.price * ftrd.quantity
				END) AS sum_revenue_free_cap
	FROM tblFreeTicketAndCapRevenueDetail AS ftrd
	INNER JOIN tblFreeTicketAndCap AS ftc
		ON ftc.ticket_cap_id = ftrd.ticket_cap_id
	INNER JOIN tblRevenue AS rv
		ON rv.revenueid = ftrd.revenue_id
		AND rv.check_ticket = 1
	INNER JOIN tblFreeTicketAndCapByMovie AS ftcm
		ON ftcm.movie_id = rv.movies_id
			AND ftcm.theater_id = rv.theater_id
			AND ftcm.ticket_cap_id = ftrd.ticket_cap_id
	WHERE rv.revenueid = @revenue_id
	GROUP BY
		ftrd.revenue_id
) AS free_ticket
	ON free_ticket.revenue_id = rv.revenueid
WHERE rv.revenueid = @revenue_id
;</value>
  </data>
  <data name="SelectData" xml:space="preserve">
    <value>SELECT
 revenue_id
 , free_ticket_norm_count
 , free_ticket_special_count
 , free_more_5_count
 , free_more_5_sum
 , update_by
 , update_date
FROM tblFreeTicketAndCapRevenueHeader
WHERE revenue_id = @revenue_id;</value>
  </data>
  <data name="SelectIncompleteMovie" xml:space="preserve">
    <value>SELECT DISTINCT
	rv.movies_id AS movie_id
FROM tblRevenue AS rv
LEFT JOIN tblFreeTicketAndCapRevenueHeader AS ftrh
	ON ftrh.revenue_id = rv.revenueid
LEFT JOIN
(
	SELECT
		ftrd.revenue_id
		, SUM(CASE 
				WHEN ftc.counting = 1
					THEN ftrd.quantity
				ELSE 0
				END) AS count_revenue_free
		, SUM(CASE 
				WHEN ftc.counting = 1
					THEN 0
				ELSE ftrd.quantity
				END) AS count_revenue_cap
		, SUM(CASE 
				WHEN ftc.counting = 0 OR rv.revenue_date &gt; ftcm.available_to
					THEN 0
				ELSE ftrd.price * ftrd.quantity
				END) AS sum_revenue_free
		, SUM(CASE 
				WHEN ftc.counting = 1 OR rv.revenue_date &gt; ftcm.available_to
					THEN 0
				ELSE ftrd.price * ftrd.quantity
				END) AS sum_revenue_cap
		, SUM(CASE 
				WHEN rv.revenue_date &gt; ftcm.available_to
					THEN 0
				ELSE ftrd.price * ftrd.quantity
				END) AS sum_revenue_free_cap
	FROM tblFreeTicketAndCapRevenueDetail AS ftrd
	INNER JOIN tblFreeTicketAndCap AS ftc
		ON ftc.ticket_cap_id = ftrd.ticket_cap_id
	INNER JOIN tblRevenue AS rv
		ON rv.revenueid = ftrd.revenue_id
	INNER JOIN tblFreeTicketAndCapByMovie AS ftcm
		ON ftcm.movie_id = rv.movies_id
		AND ftcm.theater_id = rv.theater_id
		AND ftcm.ticket_cap_id = ftrd.ticket_cap_id
	WHERE rv.check_ticket = 1
		AND rv.theater_id = @theater_id
		AND rv.revenue_date = @revenue_date
	GROUP BY
		ftrd.revenue_id
) AS free_ticket
	ON free_ticket.revenue_id = rv.revenueid
WHERE rv.check_ticket = 1
	AND rv.theater_id = @theater_id
	AND rv.revenue_date = @revenue_date
	AND 
	(
		rv.revenue_adms &lt; 0 
		OR
		rv.revenue_adms_with_free_ticket &lt; ISNULL(free_ticket.count_revenue_free, 0) + ISNULL(free_ticket.count_revenue_cap, 0) + ISNULL(ftrh.free_ticket_norm_count, 0) + ISNULL(ftrh.free_ticket_special_count, 0) 
	);</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>UPDATE tblFreeTicketAndCapRevenueHeader
SET
 free_ticket_norm_count = @free_ticket_norm_count
 , free_ticket_special_count = @free_ticket_special_count
 , free_more_5_count = @free_more_5_count
 , free_more_5_sum = @free_more_5_sum
 , update_by = @update_by
 , update_date = @cvDate
WHERE revenue_id = @revenue_id;</value>
  </data>
</root>